################################################################################
#
# Test Run Specific Settings
#
# Use this section to configure an (optional) file which contains the settings
# specific to a certain load test run. This is useful to externalize the
# definition of a certain load profile or a set of test conditions. This way,
# many of these configurations can be defined and prepared in advance and used
# as needed. For example, to switch to another load profile, just name the
# respective properties file.
#
################################################################################

## The file with test run specific settings.
posters.xlt.testPropertiesFile = test.properties

################################################################################
#
# Test Case Mapping
#
# Maps the test case class onto a load test name. The load test name will be
# referenced later in the load test configuration. You can map the same class
# to multiple load test names if needed.
#
################################################################################

## Java test cases using the HtmlUnit API and the action concept.
posters.xlt.loadtests.TVisit.class = posters.loadtest.tests.TVisit
posters.xlt.loadtests.TSearch.class = posters.loadtest.tests.TSearch
posters.xlt.loadtests.TBrowse.class = posters.loadtest.tests.TBrowse
posters.xlt.loadtests.TAddToCart.class = posters.loadtest.tests.TAddToCart
posters.xlt.loadtests.TGuestCheckout.class = posters.loadtest.tests.TGuestCheckout
posters.xlt.loadtests.TGuestOrder.class = posters.loadtest.tests.TGuestOrder
posters.xlt.loadtests.TRegister.class = posters.loadtest.tests.TRegister
posters.xlt.loadtests.TCheckout.class = posters.loadtest.tests.TCheckout
posters.xlt.loadtests.TOrder.class = posters.loadtest.tests.TOrder

################################################################################
#
# Test Specific Settings
#
# Prefix test case specific settings with the test class name.
#
################################################################################

##### General Settings (we refer to them by full property name) #####

store-url = http://localhost:8080/posters/

username = username
password = password

## The URL of the store's home page.
posters.xlt.loadtest.tests.store-url = ${store-url}

# Probability to start browsing at a top category instead of a sub category link.
# Default is 100.
browsing.topcategory.probability = 50

# Probability to refine the result's category.
cat.refine.probability = 30

# Min/max number of products to browse, search or add to cart.
products.min = 1
products.max = 2

# Probaility and min/max number of pagings on a product results page.
paging.probability = 30
paging.min = 1
paging.max = 3

# Probability to generate a search miss.
search.nohits.probability = 20

################################################################################
#
# Project-Specific Report Generator Settings
#
# In order to reduce the list of requests in the report, the values of different
# requests can be merged together. You may specify one or more merge rules as
# outlined below:
#
#   posters.xlt.reportgenerator.requestMergeRules.<num>.<param> = <value>
#
# The rules are sorted numerically based on <num> and are applied in ascending
# order.
#
# The supported values for "<param>" are:
#
#   newName .................. new request name (required)
#
#   namePattern [n] .......... reg-ex defining a matching request name
#   transactionPattern [t] ... reg-ex defining a matching transaction name
#   agentPattern [a] ......... reg-ex defining a matching agent name
#   contentTypePattern [c] ... reg-ex defining a matching response content type
#   statusCodePattern [s] .... reg-ex defining a matching status code
#   urlPattern [u] ........... reg-ex defining a matching request URL
#   runTimeRanges [r] ........ list of run time segment boundaries
#
#   stopOnMatch .............. whether or not to process the next rule even if 
#                              the current rule applied (defaults to true)
#
# At least one of namePattern, transactionPattern, agentPattern, 
# contentTypePattern, statusCodePattern, urlPattern or runTimeRanges must be
# specified. If more than one pattern is given, all given patterns must
# match. 
#
# Note that newName may contain placeholders, which are replaced with the 
# specified capturing group from the respective pattern. The placeholder  
# format is as follows: {<category>:<capturingGroupIndex>}, where <category> is 
# the type code of the respective pattern (given in brackets above) and 
# <capturingGroupIndex> denotes the respective capturing group in the selected
# pattern (does not apply to runTimeRanges). 
#
# Excluding instead of Including
#
#   posters.xlt.reportgenerator.requestMergeRules.<num>.<param>.exclude = <value>
#
# All requests that match the exclude pattern will not be selected. For example, 
# to create a bucket for all non-JavaScript resources, you would setup a rule like that.
#
#   posters.xlt.reportgenerator.requestMergeRules.1.newName = {n:0} NonJS
#   posters.xlt.reportgenerator.requestMergeRules.1.namePattern = .+
#   posters.xlt.reportgenerator.requestMergeRules.1.contentTypePattern.exclude = javascript
#   posters.xlt.reportgenerator.requestMergeRules.1.stopOnMatch = false
# 
# Please note that an include pattern as well as an exclude pattern can be specified for 
# a pattern type at the same time. In this case, a request is selected if and only if it 
# matches the include pattern, but does not match the exclude pattern.
#
################################################################################

## First, we eliminate the sub-request naming pattern, because we do not need
## that at the moment. This turns all "name.1" or "name.1.1" and so on into "name".
posters.xlt.reportgenerator.requestMergeRules.0.newName = {n:1}
posters.xlt.reportgenerator.requestMergeRules.0.namePattern = ^([^\\.]*)(\\.[0-9]+)+$
posters.xlt.reportgenerator.requestMergeRules.0.contentTypePattern =  
posters.xlt.reportgenerator.requestMergeRules.0.statusCodePattern =
posters.xlt.reportgenerator.requestMergeRules.0.urlPattern = 
posters.xlt.reportgenerator.requestMergeRules.0.stopOnMatch = false

## All requests with URLs ending with ".js" are grouped under "<name> JS".
posters.xlt.reportgenerator.requestMergeRules.1.newName = {n:0} JS
posters.xlt.reportgenerator.requestMergeRules.1.namePattern = [^.]+
posters.xlt.reportgenerator.requestMergeRules.1.contentTypePattern =
posters.xlt.reportgenerator.requestMergeRules.1.statusCodePattern =
posters.xlt.reportgenerator.requestMergeRules.1.urlPattern = \\.js$
posters.xlt.reportgenerator.requestMergeRules.1.stopOnMatch = false

## All requests with URLs ending with common image file extension are grouped
## under "<name> Images".
posters.xlt.reportgenerator.requestMergeRules.3.newName = {n:0} Images  
posters.xlt.reportgenerator.requestMergeRules.3.namePattern = [^.]+
posters.xlt.reportgenerator.requestMergeRules.3.contentTypePattern =   
posters.xlt.reportgenerator.requestMergeRules.3.statusCodePattern =
posters.xlt.reportgenerator.requestMergeRules.3.urlPattern = \\.(gif|png|jpg|ico)$
posters.xlt.reportgenerator.requestMergeRules.3.stopOnMatch = false

## All requests with URLs ending with ".css" are grouped under "<name> CSS".
posters.xlt.reportgenerator.requestMergeRules.5.newName = {n:0} CSS
posters.xlt.reportgenerator.requestMergeRules.5.namePattern = [^.]+
posters.xlt.reportgenerator.requestMergeRules.5.contentTypePattern =
posters.xlt.reportgenerator.requestMergeRules.5.statusCodePattern =
posters.xlt.reportgenerator.requestMergeRules.5.urlPattern = \\.css$
posters.xlt.reportgenerator.requestMergeRules.5.stopOnMatch = false

## Finally, append the response code to each request name. This way, statistics
## are calculated separately for each response code. So, fast 500 error 
## responses for instance will not influence the statistics for normal 200 
## responses.  
posters.xlt.reportgenerator.requestMergeRules.10.newName = {n:0} [{s:0}]  
posters.xlt.reportgenerator.requestMergeRules.10.namePattern = .*
posters.xlt.reportgenerator.requestMergeRules.10.contentTypePattern =  
posters.xlt.reportgenerator.requestMergeRules.10.statusCodePattern = [0-9]+
posters.xlt.reportgenerator.requestMergeRules.10.urlPattern = 
posters.xlt.reportgenerator.requestMergeRules.10.stopOnMatch = false
